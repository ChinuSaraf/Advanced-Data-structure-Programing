/*The symbol table is generated by compiler.  From this perspective, the symbol table is a set of name-attribute pairs. 
 In a symbol table for a compiler, the name is an identifier, and the attributes might include an initial value and a list 
of lines that use the identifier. Perform the following operations on symbol table:
 (1)   Determine if a particular name is in the table
 (2)   Retrieve the attributes of that name 
 (3)   Modify the attributes of that name 
 (4)   Insert a new name and its attributes 
 (5)   Delete a name and its attributes*/

#include<iostream>
#include<cstring>
#include<cstdlib>

using namespace std;

class node
{
public:
char name[20];
int line;
node(){}
node(char nm[20], int l)
{
strcpy(name,nm);
line=l;
}
friend class hash;
};

class hash
{
public:
node *array[20];
node *backup[20];
int n;

hash()
{
for(int i=0;i<20;i++)
{
	array[i]=NULL;
	backup[i]=NULL;
}
n=0;
}
void add(char[],int );
void delet(char[]);
int search(char[]);
void modify(char[]);
void serch(char []);
};

void hash::add(char nam[20], int ln)
{
int flag=0;
node *temp=new node(nam,ln);
int key=(nam[0]+nam[1])%20;
int i=key+1;
int pos=search(nam);
if(pos==-1)
	{
			backup[n]=temp;
			n++;
			if(array[key]==NULL)
			{
				array[key]=temp;
			}
			else
			{
				while(array[(i+20)%20]!=NULL)
				{
					if((i+20)%20==key)
					{
						flag=-1;
						break;
					}
					i++;
				}
				if(flag==-1)
				{
					cout<<"\nHash Table  Overflow!!";
				}
				else
				{
						array[(i+20)%20]=temp;
				}
			}
	}

	else
	{
		cout<<"\nElement already present!!";
	}
}


int hash::search(char nm[20])
{
int flag=-1;
int key=(nm[0]+nm[1])%20;
int i=key+1;
	
		if( array[key]!=NULL && strcmp(array[key]->name, nm)==0)
		{
			flag=key;
		}
	
	else if(array[key]!=NULL && strcmp(array[key]->name, nm)!=0)
	{
		while(1)
		{
			if(array[(i+20)%20]!=NULL)
			{
				if(strcmp(array[(i+20)%20]->name,nm) ==0)
				{
					flag=(i+20)%20;

					break;
				}
			}
			if(((i+20)%20)==key)
			{
				flag=-1;
				break;
			}
			i++;
		}
	}
return flag;
}


void hash::delet(char nm[20])
{
int pos=search(nm);
	if(pos==-1)
	{
		cout<<"\nElement not present!!";
	}
	else
	{
		for(int i=0;i<20;i++)
		{
			if(array[i]!=NULL)
			{
				array[i]=NULL;
			}		
		}

		for(int i=0;i<n;i++)
		{
			if(strcmp(backup[i]->name,nm)!=0)
			{
				add(backup[i]->name, backup[i]->line);
			}
		}
	}
}

void hash::modify(char nm[20])
{
int pos=search(nm);
int ln;
	if(pos==-1)
	{
		cout<<"\nElement not present!!";
	}

	else
	{
		cout<<"\nEnter the new line number for "<< nm<<" identifier-: ";
		cin>>ln;
		array[pos]->line=ln;
	}
}


void hash::serch(char nm[20])
{
	int flag=-1;
int key=(nm[0]+nm[1])%20;
int i=key+1;
	
		if( array[key]!=NULL && strcmp(array[key]->name, nm)==0)
		{
			flag=key;
		}


	else if(array[key]!=NULL && strcmp(array[key]->name, nm)!=0)
	{
		while(1)
		{
			if(array[(i+20)%20]!=NULL)
			{
				if(strcmp(array[(i+20)%20]->name,nm) ==0)
				{
					flag=(i+20)%20;

					break;
				}
			}
			if(((i+20)%20)==key)
			{
				flag=-1;
				break;
			}
			i++;
		}
	
	}

	if(flag==-1)
		{
			cout<<"\nName not Found!!";
		}
	else
		{
			cout<<"\nName Found at position -: "<<flag+1;
			cout<<"\nName-: "<<array[flag]->name;
			cout<<"\nLine number-: "<<array[flag]->line;
		}
}
int main()
{
int ch,pos,ln;
char nam[20];
hash h;
	while(1)
	{
	cout<<"\n1.Add Name \n2.Search Element \n3.Delete Element \n4.Modify Attribute \n5.Exit";
	cout<<"\nEnter choice-: ";
	cin>>ch;

		switch(ch)
		{
			case 1:
				cout<<"\nEnter  name to be added-: ";
				cin>>nam;
				cout<<"\nEnter Line Number for Identifier-: ";
				cin>>ln;
				h.add(nam,ln);
				break;

			case 2:
				cout<<"\nEnter  name to be searched-: ";
				cin>>nam;
				h.serch(nam);
				break;

			case 3:
				cout<<"\nEnter  name to be deleted-: ";
				cin>>nam;
				h.delet(nam);
				break;

			case 4:
				cout<<"\nEnter  name to be modified-: ";
				cin>>nam;
				h.modify(nam);
				break;

			case 5:
				exit(1);

			default: 
				cout<<"\nEnter valid Choice!!";
		}
	}
}
